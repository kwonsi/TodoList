package edu.kh.comm.member.controller;

import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.gson.Gson;

import edu.kh.comm.member.model.service.MemberService;
import edu.kh.comm.member.model.vo.Member;

@Controller //생성된 bean이 controller임을 명시+bean등록
@RequestMapping("/member")	// localhost:8080/comm/member이하의 요청을 처리하는 controller라는 의미
//-> ex)localhost:8080/comm/member , localhost:8080/comm/member/login, localhost:8080/comm/member/signup
//-> 모두 사용가능 하다
@SessionAttributes({"loginMember"})	//Model에 추가된값의 key와 어노테이션에 작성된 값이 같으면
									//해당값을 session scope로 이동시키는 역할을 한다

public class MemberController {

	private Logger logger = LoggerFactory.getLogger(MemberController.class);


//	private MemberService service = new MemberServiceImpl();
	//->다형성	-부모						-자식
	//IOC (제어의 역전) 객체생성의 주도권은 스프링이 갖고 있다 new 사용X

	@Autowired //bean으로 등록된 객체 중 타입이 같거나, 상속관계인 bean을 주입해주는
	private MemberService service;	//IOC + 의존성 주입(OI)

	//------------------------------------------------------------------------

	//Controller :요청/응답을 제어하는 역할을 지닌 클래스

	/*@RequestMapping :클라이언트 요청(url)에 맞는 클래스 or 메서드를 연결시켜주는 annotation(어노테이션)
	 * [위치에 따른 해석]
	 * -클래스 레벨: 공통주소( ex) /member)
	 * -메서드 레벨: 공통주소 외 나머지 주소
	 *
	 * 단, 클래스 레벨에 @RequestMapping이 존재하지 않는다면
	 * 메서드 레벨은 단독 요청 처리 주소 이다
	 *
	 * [작성법에 따른 해석]
	 *1.@RequestMapping("url")
	 * ->요청방식(GET/POST)에 관계없이 url이 일치하는 요청 처리할 수 있다
	 *
	 *2.@RequestMapping(value = "url", method = RequestMethod.(GET or POST) )
	 * ->요청방식(GET, POST)에 따라 요청을 처리한다
	 *
	 * ***메서드 레벨에서 GET/POST방식을 구분하여 맵핑***
	 * @GetMapping("url")	/@PostMapping("url")
	 *
	 */

	//------------------------------------------------------------------------

	/*로그인 요청시 파라미터 얻어오는 방법1
	 * ->HttpServletRequest 이용
	 *
	 */
//	@RequestMapping("/login")
//	//-> localhost:8080/comm/member/login의 의미
//	public String login(HttpServletRequest req) {
//
//		logger.info("로그인요청됨");
//
//		String inputEmail = req.getParameter("inputEmail");
//		String inputPw = req.getParameter("inputPw");
//
//		logger.debug("inputEmail : " + inputEmail);
//		logger.debug("inputPw : " + inputPw);
//
//		return "redirect:/";
//
//	}

	//---------------------------------------------------------------------------
	//요청시 파라미터를 얻어오는 방법2
	//->@RequestParam 어노테이션 사용
	//@RequestParam("name속성값") 자료형 변수명
	//-클라이언트 요청 시 같이 전달된 파라미터를 변수에 저장한다
	//->어떤 파라미터를 변수에 저장할지는 "name속성값"을 이용해 지정한다

	//@RequestParam을 생략하지만 파라미터를 얻어오는 방법
	//->name

	//[속성]
	//value: input태그의 name속성값

	//required :입력된 name 속성값이 필수적으로 파라미터에 포함되어야 하는지를 지정
	//			required = true / false ( 기본값 true)

	//defaultValue :required가 false인 상태에서 파라미터가 존재하지 않을 경우의 값을 지정

//	@RequestMapping("/login")
////	//-> localhost:8080/comm/member/login의 의미
//	public String login(/*@RequestParam("inputEmail")*/ String inputEmail,
//						/*@RequestParam("inputEmail")*/ String inputPw,
//						@RequestParam(value="inputName", required=false, defaultValue="홍기동") String inputName) {
//	logger.info("로그인요청됨");
//
//	logger.debug("email : " + inputEmail);
//	logger.debug("pw : " + inputPw);
//	logger.debug("name : " + inputName);
//
//	return "redirect:/";
//	}


	//---------------------------------------------------------------------------
	//요청 시 파라미터를 얻어오는 방법3
	//->@ModelAttribute 어노테이션 사용

	//@ModelAttribute를 매개변수에 작성하는 경우
	//@ModelAttribute VO타입 변수명과 jsp의 태그의 name값이 같아야 사용 가능


	@PostMapping("/login")
	//=> @RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(@ModelAttribute Member inputMember, Model model,
						RedirectAttributes ra, HttpServletResponse resp, HttpServletRequest req,
						@RequestParam(value="saveId", required=false) String saveId) {
						//required=false -> true면 무조건 체크되이어야하고, false면 체크 안되있어도 무관
		logger.info("로그인 기능 수행됨");

		//아이디, 비밀번호가 일치하는 회원정보를 조회하는 service 호출 후 결과 반환 받기
		Member loginMember = service.login(inputMember);

		/*Model :데이터를 맵 형식(K:V) 형태로 담아 전달하는 용도의 객체
		 * -> request, session을 대체하는 객체
		 * -기본 scope: request
		 * -session scope로 변환하고 싶은 경우
		 * 클래스 레벨로 @SessionAttribute를 작성하면 된다 ( 맨위에 추가)
		 */
		if(loginMember != null) {	//로그인 성공
			model.addAttribute("loginMember", loginMember);


			//로그인 성공시 무조건 쿠키 생성
			//단, 아이디 저장 체크 여부에 따라 쿠키 유지시간을 조절

			//쿠기생성
			Cookie cookie = new Cookie("saveId", loginMember.getMemberEmail());

			if(saveId != null) {	//아이디 저장이 체크됬을때
				cookie.setMaxAge(60*60*24*365); //값은 초단위로 지정
			}else {	//체크안됬을때
				cookie.setMaxAge(0);	//0초 -> 생성되자마자 쿠기가 사라진다
			}
			//쿠키가 적용될 범위(경로)지정
			//request 의 ContextPath로 지정(최상위페이지에서 로그인 하니깐 그 페이지에 적용)
			cookie.setPath(req.getContextPath());

			//쿠키 응답시 클라이언트(jsp)에게 전달
			resp.addCookie(cookie);


		}else {	//로그인 실패
			//model.addAttribute("message", "아이디 또는 비밀번호가 일치하지 않습니다");
			ra.addFlashAttribute("message", "아이디 또는 비밀번호가 일치하지 않습니다");
		}
		return "redirect:/";
	}

	//---------------------------------------------------------------------------
	//로그아웃
	@GetMapping("/logout")
	public String logout(SessionStatus status) {

		//로그아웃 = 세션을 없애는것

		//@SessionAttributes를 이용해 session scope에 배치된 데이터는
		//SessionStatus라는 별도 객체를 이용해야만 없앨 수 있다

		logger.info("로그아웃 기능 수행됨");

		status.setComplete();	//세션이 할일 완료 -> 없앤다

		return "redirect:/";

	}


	//---------------------------------------------------------------------------
	//회원가입 화면 전환
//	@GetMapping("/signUp")
	@RequestMapping("/signUp")
	//위에 @RequestMapping("/member") 적혀있으므로 /signUp만 적어주면 된다
	public String signUP() {

		return "member/signUp";
	}


	//---------------------------------------------------------------------------
	//이메일 중복검사

	//int result를 return하기 위한 어노테이션
	@ResponseBody
	@GetMapping("/emailDupCheck")
	//@GetMapping("ajax url")
	//public String emailDupCheck(@RequestParam("memberEmail") String memberEmail)
	public int emailDupCheck(String memberEmail) {

		int result = service.emailDupCheck(memberEmail);

		//컨트롤러에서 반환되는 값을 forward또는redirect를 위한 경로인 경우가 일반적이다
		//-> 반환되는 값은 경로로 인식된다
		//->해결하기 위한 어노테이션 @ResponseBody가 존재

		//@ResponseBody :반환되는 값을 응답의 몸통(body)에 추가해 이전 요청주소로 돌아간다
		//-> 컨트롤러에서 반환되는 값이 경로가 아닌 값자체로 인식된다
		return result;

	}

	//---------------------------------------------------------------------------
	//닉네임 중복 검사

	@ResponseBody
	@GetMapping("/nicknameDupCheck")
	//@GetMapping("url")
	public int nickDupCheck(String memberNickname) {

		int result = service.nickDupCheck(memberNickname);

		return result;

	}


	//*****방법2*****
	@PostMapping("/signUp")
	//= Post방식 (<form action="signUp">)
	public String signUp(Member inputMember, String[] memberAddress,
						RedirectAttributes ra) {
		//-> VO Member를 가져오기 위해 @ModelAttribute 사용
		//-> 단, VO Member 필드 변수명과 signUp.jsp의 주소 name값 memberAddress이 같아야
		//@ModelAttribute 사용 가능

		//같은 name을 가진 주소가 하나의 문자열로 합쳐져 들어오게 된다
		//->도로명 주소에 ","기호가 포함되는 경우가 있어 ","를 구분자로 사용할 수 없다
		//String[] memberAddress 안에는
		//name이 memberAddress인 파라미터 값이 모두 배열에 담아서 반환

		inputMember.setMemberAddress(String.join(",,", memberAddress));
		//String.join("구분자", 배열)
		//배열을 하나의 문자열로 합치는 메서드
		//중간에 구분자가 포함되 문자열이 생성된다
		//-> ex) [a,b,c] -join진행 "a,,b,,c"

		//null값일 때 ,, ,,
		if(inputMember.getMemberAddress().equals(",,,,")) {	//주소가 입력되지 않은 경우
			inputMember.setMemberAddress(null);	//null로 반환
		}

		//회원가입 서비스 호출
		int result = service.signUp(inputMember);

		String message = null;
		String path = null;
		if(result>0) {	//회원가입 성공시
			message = "회원가입성공";
			path = "redirect:/";

		}else {	//회원가입 실패시
			message = "회원가입실패";
			path = "redirect:/member/signUp";
		}

		ra.addFlashAttribute("message", message);

		return path;

	}




	//---------------------------------------------------------------------------
	//회원 1명 조회(ajax)	(sqlSession.selectOne())
	@ResponseBody	//ajax응답시 사용
	@PostMapping("/selectOne")
	//*****방법1*****
//	public Member selectOne(@RequestParam("memberEmail") String memberEmail) {
//
//		return service.selectOne(memberEmail);
//	}

	//*****방법2*****
	public String selectOne(@RequestParam("memberEmail") String memberEmail) {
		Member mem = service.selectOne(memberEmail);
		//Gson
		return new Gson().toJson(mem);

	}



	//---------------------------------------------------------------------------
	//회원 목록 조회(ajax) (sqlSession.selectList())
	@ResponseBody //ajax응답시 사용
	@RequestMapping("/selectAll")
	//*****방법1*****
//	public List<Member> selectAll() {
//		return service.selectAll();
//	}

	//*****방법2*****
	public String selectAll() {
		List<Member> list = service.selectAll();
		return new Gson().toJson(list);
	}

	//---------------------------------------------------------------------------
	//예외처리
	/*스프링 예외처리 방법
	 * 1순위 :메서드 별로 예외처리(try~catch /throws)
	 * 2순위 :하나의 컨트롤러에서 발생하는 예외를 모아서 처리
	 * 		->@ExceptionHandler(메서드에서 작성)
	 * 3순위 :전역(웹 애플리케이션)에서 발생하는 예외를 모아서 처리
	 * 		 ->@ControllerAdvice(클래스에서 작성)
	 * 		 ->에러 처리용 클래스 따로 만들어서 처리
	 *
	 */

	//스프링 예외처리 방법 2순위
	//멤버 컨트롤러에서 발생하는 모든 예외를 모아서 처리
//	@ExceptionHandler(Exception.class)
//	//->@ExceptionHandler(예외종류.class)
//	public String exceptionHandler(Exception e, Model model) {
//		e.printStackTrace();
//
//		model.addAttribute("errorMassage", "서비스 이용 중 문제 발생");
//		model.addAttribute("e", e);
//
//		return "common/error";
//	}

}






















