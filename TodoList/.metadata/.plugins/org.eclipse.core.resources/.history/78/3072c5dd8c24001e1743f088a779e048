<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
  <!-- 
  mapper파일 생성시 반드시 해야하는것
  1.cache-ref 태그 삭제
  2.mapper태그에 namespace 속성 추가
  
  -수행하려는 SQL에 따라서 태그가 구분된다(사용가능한 속성도 다르다)-
  -->
   	
  <!-- *****resultMap 태그*****
  -SELECT 조회결과(ResultSet)의 컬럼과 
  조회결과를 옮겨 담을 VO의 필드명이 일치하지 않을 때
  이를 매핑시켜 조회결과가 필드에 세팅되게 하는 역할
  
  [resultMap 속성]
  1)type :조회결과를 담을 VO의 타입 또는 별칭 ex)mybatis-config에서 만든member
  2)id :만들어진 resultMap태그를 지칭할 이름(식별명)
  
  [resultMap 내부 작성 태그]
  <id> :PK역할의 컬럼 - 필드연결
  <result> :
   -->
    
    <resultMap type="member" id="member_rm">
    
    	<id property="memberNo" column="MEMBER_NO"/>
    	
    	<result property="memberEmail"		column="MEMBER_EMAIL"/>
    	<result property="memberPw" 		column="MEMBER_PW"/>
		<result property="memberNickname" 	column="MEMBER_NICK"/>
		<result property="memberTel" 		column="MEMBER_TEL"/>
		<result property="memberAddress" 	column="MEMBER_ADDR"/>
		<result property="profileImage" 	column="PROFILE_IMG"/>
		<result property="enrollDate" 		column="ENROLL_DT"/>
		<result property="secessionFlag" 	column="SECESSION_FL"/>
    
    </resultMap>
    
  	
  <!--
  *****select태그 속성*****
   1)resultType :조회결과가 1행 1열인 경우에만 작성해야 한다
   				 조회된 데이터의 java자료형을 Mybatis별칭 형태로 작성해야 한다
  
  [**mybatis별칭**]
  		[java]		:		[mybatis]
  	     int		:		_int
  	     Integer	:		int
  	     String		:		string (== java.lang.String)
   -->
  
  <!-- 조회되는 행 개수: 1행 -->
  <select id="test1" resultType="_int">
  	SELECT COUNT(*) FROM MEMBER_S
  </select>
  
  
  
  <!-- *****중요*****
  	MyBatis에서 #{}, ${} 차이점
  	
  	#{변수명} :SQL에 값이 포함될 때 양쪽 ''추가된다
  			  -> 리터럴 사용(값 자체로 사용)
  	->pstmt 로 생각하고 사용하면 됩니다
  			  
  	${변수명} :SQL에 값이 포함될 때 양쪽 ''추가되지 않는다
  			   -> SQL 구문 조합시 사용(=condition)
  	->stmt 로 생각하고 사용하면 됩니다
  	-->
  	
  
  <!-- 조회되는 행 개수:1행 / 파라미터타입: String / 조회되는 타입: String -->
  <!-- 자바에서의 ? 대신 #{} -->
  <select id="test2" parameterType="string" resultType="string">
  	SELECT MEMBER_NICK FROM MEMBER_S
	WHERE MEMBER_EMAIL = #{memberEmail}
	AND SECESSION_FL = 'N'
  </select>
  
  
  <!-- 파라미터로 vo가 전달되는 경우
  	1)패키지명 + 클래스명을 모두 작성해줘야 한다
  	2)mapper에서 vo에서 저장된 값을 얻어와 사용할 경우 #{필드명}을 사용한다
  		단, vo가 반드시 있어야한다 -->
  
  <!-- 조회되는 행개수 1행, 파라미터타입: edu.kh.comm.member.model.vo.Member 
  조회되는타입: java.lang.String = string(mybatis별칭) -->
  <select id="test3" parameterType="member" resultType="string">
  	SELECT MEMBER_TEL FROM MEMBER_S
	<where>
	MEMBER_EMAIL = #{memberEmail} 
	AND MEMBER_PW = #{memberPw}
	AND SECESSION_FL = 'N'
	</where> 
  </select>
  
  
  <!-- 진짜 로그인 -->
  <!-- 조회되는 행개수 1행, 파라미터타입: edu.kh.comm.member.model.vo.Member -> member(사용자정의)
  	   조회되는 타입: edu.kh.comm.member.model.vo.Member -> member(사용자정의)  -->
  	
  <!-- 
  *resultType에 vo를 작성하는 경우*
  -VO의 필드명과 DB의 조회되는 컬럼명이 일치하면 자동으로 VO객체에 값이 세팅된다
  -> java와 DB의 표기법 차이로 인해 위 특징이 적용되는 경우가 거의 없다
  	ex) vo.Member = memberNo -> DB = MEMBER_NO
  -> 해결방법
  	필드명, 컬럼명이 다르더라도 이를 연결시켜 줄 수 있는 <resultMap> 태그를 제공한다
  	[vo필드] - [DB의 컬럼]
  	memberNo - MEMBER_NO
   
   resultMap="member_rm" -> 조회결과를 member_rm을 이용해 비교하여 VO에 세팅까지 해준것이다
   
   -->
  
  <select id="login" parameterType="member" resultMap="member_rm">
  	SELECT MEMBER_NO,MEMBER_EMAIL,MEMBER_NICK ,MEMBER_TEL,
    MEMBER_ADDR, PROFILE_IMG, 
    TO_CHAR( ENROLL_DT, 'YYYY-MM-DD HH24:MI:SS') AS ENROLL_DT, MEMBER_PW
	FROM MEMBER_S
	<where>
	MEMBER_EMAIL = #{memberEmail}
	<!-- AND MEMBER_PW = #{memberPw} -->
	AND SECESSION_FL = 'N'
	</where> 
  </select>
  
  
  <!-- 이메일 중복검사 -->
  <select id="emailDupCheck" parameterType="string" resultType="_int">
  	SELECT COUNT(*) FROM MEMBER_S
  	WHERE MEMBER_EMAIL = #{memberEmail}
  	AND SECESSION_FL = 'N'
  
  </select>
  
  <!-- 닉네임 중복검사 -->
  <select id="nickDupCheck" parameterType="string" resultType="_int">
  	SELECT COUNT(*) FROM MEMBER_S
  	WHERE MEMBER_NICK = #{memberNickname}
  	AND SECESSION_FL = 'N'
  </select>
  
  <!-- 회원가입 -->
  <insert id="signUp" parameterType="member">
  	INSERT INTO MEMBER_S
  	VALUES (SEQ_MEMBER_NO_S.NEXTVAL, #{memberEmail}, #{memberPw},#{memberNickname}, #{memberTel}, #{memberAddress},
  	DEFAULT, DEFAULT, DEFAULT)
  </insert>
  
  <!-- 이메일 입력해서 회원조회하기 -->
  <select id="selectOne" parameterType="string" resultMap="member_rm">
  	SELECT MEMBER_EMAIL, MEMBER_NICK, MEMBER_TEL, MEMBER_ADDR,
	TO_CHAR(ENROLL_DT, 'YYYY-MM-DD') AS ENROLL_DT
	FROM MEMBER_S
	<where>
	MEMBER_EMAIL = #{memberEmail}
	AND SECESSION_FL = 'N'
	</where>
  </select>
  
  
  <!-- 회원정보 전체조회 -->
  <select id="selectAll" resultMap="member_rm">
  	SELECT MEMBER_NO, MEMBER_EMAIL, MEMBER_NICK FROM MEMBER_S
  </select>
  	
  	
  	
  <!-- 투두리스트 db 삽입 -->
	<insert id="todoInsert">
		INSERT INTO TODOLIST VALUES
		(SEQ_TODO_NO.NEXTVAL, #{inputtext}, DEFAULT, #{memberNo})
	</insert>

  
</mapper>












































