package edu.kh.comm.member.model.service;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import edu.kh.comm.member.model.dao.MemberDAO;
import edu.kh.comm.member.model.vo.Member;
import lombok.extern.slf4j.Slf4j;

//bean객체로 등록
@Service	//->비지니스 로직을 처리하는 클래스임을 명시 + bean으로 등록
@Slf4j
public class MemberServiceImpl implements MemberService {
//->에러 발생시 Add unimplemented method로 Member 오버라이딩

	@Autowired //DAO하고 연결
	private MemberDAO dao;

	@Autowired
	private BCryptPasswordEncoder bcrypt;

	//private Logger logger = LoggerFactory.getLogger(MemberServiceImpl.class);


	/*Connection을 Service에서 얻어왔던 이유
	 * -Service의 메서드 하나는 요청을 처리하는 업무단위
	 * ->해당업무가 끝난 후 트랜잭션을 한번에 처리하기  위해서
	 * 어쩔수 없이 Connection을 Service에서 얻어올 수 밖에 없었다
	 *
	 * -마이바티스(MyBatis)를 사용해 주므로
	 * Connection을 얻어오거나 반환하거나
	 * 트랜잭션을 처리하는 구문을 적지 않아도 된다
	 * ->Spring에서 제어를 하기 때문에 Service 구문이 간다해진다
	 * ex)
	 * Connection conn = getConnection();
	 * Member loginMember = dao.login(conn, member);
	 * close(conn);
	 * -> ex 내용들을 Service에서 안적어줘도 된다
	 */


	//로그인 서비스 구현
	@Override
	public Member login(Member inputMember) {

		//전달 받은 비밀번호를 암호화 하여 DB에서 조회한 비밀번호화 비교(DB에서 비교X)

		//sha방식 암호화
		//A회원 비번 1234 -> 암호화: asdf
		//B회원 비번 1234 -> 암호화: asdf

		//Bcrypt방식 암호화
		//:암호화 하기전에 salt를 추가하여 변형된 상태로 암호화를 진행한다
		//A회원 비번 1234 -> 암호화: asdf
		//B회원 비번 1234 -> 암호화: qqggdsfe

		//매번 암호화되는 비밀번호가 달라져 DB에서 직접 비교 불가능
		//대신 Bcrypt 암호화를 지원하는 객체가
		//이를 비교하는 기능(메서드)를 가지고있어서 이를 활용하면 된다

		//***Bcrpyt 암호화를 사용하기 위해 이를 지원하는 Spring-security 모듈 추가해야한다***

		//			원래비밀번호	/	암호화된비밀번호
		log.debug(inputMember.getMemberPw() + " / " + bcrypt.encode(inputMember.getMemberPw()));
		log.debug(inputMember.getMemberPw() + " / " + bcrypt.encode(inputMember.getMemberPw()));
		log.debug(inputMember.getMemberPw() + " / " + bcrypt.encode(inputMember.getMemberPw()));

		Member loginMember = dao.login(inputMember);

		//loginMember == null ->일치하는 이메일이 없다는 의미
		if(loginMember != null) {	//일치하는 이메일을 가진 회원정보가 있을 경우

			//비밀번호암호화
								//평문(비밀번호)			DB에서 조회한 암호화된 비밀번호	->같으면 true
			if(bcrypt.matches(inputMember.getMemberPw(), loginMember.getMemberPw())) {	//비밀번호가 일치할 경우
				loginMember.setMemberPw(null);	//비교 끝나서 비밀번호 지우기 (session에 올라가지 않게끔)
			}else {
				loginMember = null;
			}

		}

		return loginMember;
	}

	//이메일 중복검사
	@Override
	public int emailDupCheck(String memberEmail) {

		return dao.emailDupCheck(memberEmail);
	}

	//닉네임 중복검사
	@Override
	public int nickDupCheck(String memberNickname) {

		return dao.nickDupCheck(memberNickname);
	}


	//회원가입

	//*****방법1*****
//	@Override
//	public int signUp(Member member) {
//
//		 member.setMemberPw( bcrypt.encode(member.getMemberPw()) );
//		 //-> 회원가입시 Pw값이 DB에 암호화 되어 저장되기 위한 것
//
//		return dao.signUp(member);
//	}

	//*****방법2*****
	@Override
	public int signUp(Member inputMember) {
		//비밀번호 암호화(bycrypt)
		String encPw = bcrypt.encode(inputMember.getMemberPw());

		//암호화된 비밀번호로 다시 세팅
		inputMember.setMemberPw(encPw);

		return dao.signUp(inputMember);
	}


	//이메일에 입력해 회원정보조회
	@Override
	public Member selectOne(String memberEmail) {
		return dao.selectOne(memberEmail);
	}

	//회원정보 전체조회
	@Override
	public List<Member> selectAll() {
		return dao.selectList();
	}

	//투두리스트 db삽입
	@Override
	public int todoInsert(Member loginMember) {
		return dao.todoInsert(loginMember);
	}

	//투두리스트 조회
	@Override
	public List<Member> todoSelect(int memberNo) {
		return dao.todoSelect(memberNo);
	}







}// end of class MemberServiceImpl
