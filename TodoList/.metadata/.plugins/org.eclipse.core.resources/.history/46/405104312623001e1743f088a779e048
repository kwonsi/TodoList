package edu.kh.comm.member.model.dao;
import java.util.List;

import org.mybatis.spring.SqlSessionTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import edu.kh.comm.member.model.vo.Member;
//bean객체로 등록
@Repository	//DB관련 파일과 연결되는 클래스임을 명시 + bean등록
public class MemberDAO {
	/*DAO는 DB랑 연결하기 위한 Connection이 공통적으로 필요하다
	 * ->필드선언
	 *
	 * SqlSessionTemplate 사용
	 * (SqlSessionTemplate) :Mybatis영속성 프레임워크를 통해 이용하려면 Connection을 이용해 만든 객체
	 *
	 */
	//Connection 대신 SqlSessionTemplate
	//-> 사용하려면 마이바티스 설정 해줘야한다
	@Autowired //reoot-context.xml에서 생성된 SqlSessionTemplate bean을 의존송 주입(DI)
	private SqlSessionTemplate sqlSession;

	//dbug 쓰위위함
	private Logger logger = LoggerFactory.getLogger(MemberDAO.class);

	public Member login(Member inputMember) {

		//1행조회(파라미터x) 방법
		//int count = sqlSession.seleOne("namespace값.id값");
//		int count = sqlSession.selectOne("memberMapper.test1");
//		logger.debug(count + ""); 	//debug는 문자만 입력받을 수 있어서""

//		//1행조회(파라미터O)방법
//		String memberNickname = sqlSession.selectOne("memberMapper.test2", inputMember.getMemberEmail());
//		logger.debug(memberNickname);


		//----------------------------------------------------------------------------------

		//1행조회(파라티머가 VO인 경우)
		String memberTel = sqlSession.selectOne("memberMapper.test3", inputMember);
		//-> inputMember 안에는 memberEmail, memberPw 존재

		logger.debug(memberTel);


		//1행 조회(파라미터VO, 반환되는 결과 VO)
		Member loginMember = sqlSession.selectOne("memberMapper.login", inputMember);

		return loginMember;
	}



	/**이메일 중복검사 DAO
	 * @param memberEmail
	 * @return
	 */
	public int emailDupCheck(String memberEmail) {
		return sqlSession.selectOne("memberMapper.emailDupCheck", memberEmail);
		//sqlSession.selectOne(" mapper에서 <select id="emailDupCheck">의 id값")
	}



	/**닉네임 중복검사
	 * @param memberNickname
	 * @return
	 */
	public int nickDupCheck(String memberNickname) {
		return sqlSession.selectOne("memberMapper.nickDupCheck", memberNickname);
	}



	/**회원가입
	 * @param memberEmail
	 * @param memberPw
	 * @param memberNickname
	 * @param memberTel
	 * @return
	 */
	//*****방법1*****
//	public int signUp(Member member) {
//		return sqlSession.insert("memberMapper.signUp", member);
//		//sqlSession.insert(" mapper에서 <insert id="signUp">의 id값")
//	}

	//*****방법2*****
	public int signUp(Member inputMember) {

		//insert, update, delete 반환값 int형으로 고정
		//-> mapper에서도 resultType 항상 _int로 고정
		//-> resultType 생략가능 (기본 _int)

		return sqlSession.insert("memberMapper.signUp", inputMember);
	}



	/**회원정보조회
	 * @param memberEmail
	 * @return
	 */
	public Member selectOne(String memberEmail) {

		return sqlSession.selectOne("memberMapper.selectOne", memberEmail);
		//sqlSession.selectOne(" mapper에서 <select id="selectOne">의 id값")
	}



	/**회원전체조회
	 * @return
	 */
	public List<Member> selectList() {
		return sqlSession.selectList("memberMapper.selectAll");
		//sqlSession.selectList(" mapper에서 <select id="selectAll">의 id값")
	}



	/**투두리스트 db 삽입
	 * @param memberNo
	 * @param inputtext
	 * @return
	 */
	public int todoInsert(int memberNo, String inputtext) {
		return sqlSession.insert("memberMapper.todoInsert", memberNo);
	}




}//end of MemberDAO


































